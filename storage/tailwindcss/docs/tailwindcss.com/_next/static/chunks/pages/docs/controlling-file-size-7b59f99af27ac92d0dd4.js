_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[78],{UyA5:function(e,a,t){"use strict";t.d(a,"c",(function(){return s})),t.d(a,"a",(function(){return o})),t.d(a,"b",(function(){return p}));var n=t("q1tI"),c=t.n(n).a.createElement;function s(e){var a=e.children;return c("p",{className:"flex items-start mt-8 mb-0"},c("svg",{className:"h-6 w-6 mr-2 flex-shrink-0",viewBox:"0 0 24 24"},c("circle",{className:"text-green-200 fill-current",cx:"12",cy:"12",r:"10"}),c("path",{className:"text-green-600 fill-current",d:"M10 14.59l6.3-6.3a1 1 0 0 1 1.4 1.42l-7 7a1 1 0 0 1-1.4 0l-3-3a1 1 0 0 1 1.4-1.42l2.3 2.3z"})),c("strong",{className:"text-base font-semibold text-gray-800"},a))}function o(e){var a=e.children;return c("p",{className:"flex items-start mt-8 mb-0"},c("svg",{className:"h-6 w-6 mr-2 flex-shrink-0",viewBox:"0 0 24 24"},c("circle",{cx:"12",cy:"12",r:"10",fill:"#fed7d7"}),c("path",{fill:"#f56565",d:"M13.41 12l2.83 2.83a1 1 0 0 1-1.41 1.41L12 13.41l-2.83 2.83a1 1 0 1 1-1.41-1.41L10.59 12 7.76 9.17a1 1 0 0 1 1.41-1.41L12 10.59l2.83-2.83a1 1 0 0 1 1.41 1.41L13.41 12z"})),c("strong",{className:"text-base font-semibold text-gray-800"},a))}function p(e){var a=e.children;return c("div",{className:"text-sm bg-blue-100 text-blue-700 font-semi-bold px-4 py-2 mb-4 rounded"},c("div",{className:"flex items-center"},c("div",{className:"mr-2"},c("svg",{fill:"currentColor",viewBox:"0 0 20 20",className:"block text-blue-400 h-5 w-5"},c("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M16.432 15C14.387 9.893 12 8.547 12 6V3h.5a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5H8v3c0 2.547-2.387 3.893-4.432 9-.651 1.625-2.323 4 6.432 4s7.083-2.375 6.432-4zm-1.617 1.751c-.702.21-2.099.449-4.815.449s-4.113-.239-4.815-.449c-.249-.074-.346-.363-.258-.628.22-.67.635-1.828 1.411-3.121 1.896-3.159 3.863.497 5.5.497s1.188-1.561 1.824-.497a15.353 15.353 0 0 1 1.411 3.121c.088.265-.009.553-.258.628z"}))),c("div",null,c("p",{className:"font-semibold"},a))))}},e5lI:function(e,a){e.exports={"1-screen":{original:"928.7kB",minified:"768.3kB",gzipped:"75.4kB",brotlified:"35.1kB"},"2-screens":{original:"1412.3kB",minified:"1159.2kB",gzipped:"112.6kB",brotlified:"38.5kB"},"25-colors":{original:"1075.7kB",minified:"849.5kB",gzipped:"95.6kB",brotlified:"27.2kB"},"3-screens":{original:"1896.2kB",minified:"1550.4kB",gzipped:"150.0kB",brotlified:"41.8kB"},"35-colors-3-screens":{original:"1009.1kB",minified:"805.8kB",gzipped:"85.7kB",brotlified:"27.9kB"},"50-colors":{original:"1551.7kB",minified:"1248.0kB",gzipped:"124.1kB",brotlified:"34.1kB"},default:{original:"2380.4kB",minified:"1941.7kB",gzipped:"187.1kB",brotlified:"45.2kB"}}},nRdq:function(e,a,t){"use strict";t.r(a),t.d(a,"Layout",(function(){return d})),t.d(a,"meta",(function(){return N})),t.d(a,"tableOfContents",(function(){return g})),t.d(a,"default",(function(){return f}));var n=t("wx14"),c=t("Ff2n"),s=t("q1tI"),o=t.n(s),p=t("7ljp"),l=t("YFqc"),r=t.n(l),i=t("tc9R"),m=t("vRWG"),b=t("I6Nb"),j=t("UyA5"),u=t("e5lI"),O=t.n(u),d=(o.a.createElement,m.DocumentationLayout),N={title:"Controlling File Size",description:"Strategies for keeping your generated CSS small and performant."},g=[{title:"Overview",slug:"overview",children:[]},{title:"Writing purgeable HTML",slug:"writing-purgeable-html",children:[]},{title:"Removing unused CSS",slug:"removing-unused-css",children:[{title:"Basic usage",slug:"basic-usage"},{title:"Enabling manually",slug:"enabling-manually"},{title:"Preserving HTML elements",slug:"preserving-html-elements"},{title:"Purging specific layers",slug:"purging-specific-layers"},{title:"Removing all unused styles",slug:"removing-all-unused-styles"},{title:"PurgeCSS options",slug:"purge-css-options"}]},{title:"Setting up PurgeCSS manually",slug:"setting-up-purge-css-manually",children:[{title:"Understanding the regex",slug:"understanding-the-regex"},{title:"Customizing the regex",slug:"customizing-the-regex"}]},{title:"Alternate approaches",slug:"alternate-approaches",children:[{title:"Limiting your color palette",slug:"limiting-your-color-palette"},{title:"Removing unused breakpoints",slug:"removing-unused-breakpoints"},{title:"Disabling unused utilities and variants",slug:"disabling-unused-utilities-and-variants"}]}],k={Layout:d,meta:N,tableOfContents:g},h=b.ContentsLayout;function f(e){var a=e.components,t=Object(c.a)(e,["components"]);return Object(p.a)(h,Object(n.a)({},k,t,{components:a,mdxType:"MDXLayout"}),Object(p.a)(i.a,{level:2,id:"overview",toc:!0,hidden:!0,mdxType:"Heading"},"Overview"),Object(p.a)("p",null,"Using the default configuration, the development build of Tailwind CSS is ",O.a.default.original," uncompressed, ",O.a.default.gzipped," minified and compressed with ",Object(p.a)("a",{href:"https://www.gnu.org/software/gzip/"},"Gzip"),", and ",O.a.default.brotlified," when compressed with ",Object(p.a)("a",{href:"https://github.com/google/brotli"},"Brotli"),"."),Object(p.a)("table",null,Object(p.a)("thead",null,Object(p.a)("tr",null,Object(p.a)("th",null,"Uncompressed"),Object(p.a)("th",null,"Minified"),Object(p.a)("th",null,"Gzip"),Object(p.a)("th",null,"Brotli"))),Object(p.a)("tbody",null,Object(p.a)("tr",null,Object(p.a)("td",null,O.a.default.original),Object(p.a)("td",null,O.a.default.minified),Object(p.a)("td",null,O.a.default.gzipped),Object(p.a)("td",null,O.a.default.brotlified)))),Object(p.a)("p",null,"This might sound enormous but ",Object(p.a)("strong",{parentName:"p"},"the development build is large by design"),"."),Object(p.a)("p",null,"To make the development experience as productive as possible, Tailwind generates thousands of utility classes for you, most of which you probably won't actually use."),Object(p.a)("p",null,"For example, Tailwind generates margin utilities for every size in your spacing scale, for every side of an element you might want to apply margin to, at every breakpoint you are using in your project. This leads to hundreds of different combinations that are all important to have available, but not all likely to be needed."),Object(p.a)("p",null,Object(p.a)("strong",{parentName:"p"},"When building for production, you should always use Tailwind's ",Object(p.a)("inlineCode",{parentName:"strong"},"purge")," option to tree-shake unused styles and optimize your final build size.")," When removing unused styles with Tailwind, it's very hard to end up with more than 10kb of compressed CSS."),Object(p.a)(i.a,{level:2,id:"writing-purgeable-html",toc:!0},"Writing purgeable HTML"),Object(p.a)("p",null,"Before getting started with the ",Object(p.a)("inlineCode",{parentName:"p"},"purge")," feature, it's important to understand how it works and build the correct mental model to make sure you never accidentally remove important styles when building for production."),Object(p.a)("p",null,Object(p.a)("a",Object(n.a)({parentName:"p"},{href:"https://purgecss.com/"}),"PurgeCSS")," ",Object(p.a)("em",{parentName:"p"},"(the library we use under the hood)")," is intentionally very naive in the way it looks for classes in your HTML. It doesn't try to parse your HTML and look for class attributes or dynamically execute your JavaScript \u2014 it simply looks for any strings in the entire file that match this regular expression:"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token regex"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token regex-delimiter"}),"/"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token language-regex"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-negation"}),"^"),"<>\"'`",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charclass"}),"\\s"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"]")),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token quantifier"}),"*"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-negation"}),"^"),"<>\"'`",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charclass"}),"\\s"),":",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"]"))),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token regex-delimiter"}),"/"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token regex-flags"}),"g")))),Object(p.a)("p",null,"That means that ",Object(p.a)("strong",{parentName:"p"},"it is important to avoid dynamically creating class strings in your templates with string concatenation"),", otherwise PurgeCSS won't know to preserve those classes."),Object(p.a)(j.a,{mdxType:"TipBad"},"Don't use string concatenation to create class names"),Object(p.a)("pre",{className:"language-html mt-4"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token attr-name"}),":class"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token attr-value"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),"="),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),'"'),"text-{{ error ? 'red' : 'green' }}-600",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),'"')),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),">")),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),"</"),"div"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),">")))),Object(p.a)(j.c,{mdxType:"TipGood"},"Do dynamically select a complete class name"),Object(p.a)("pre",{className:"language-html mt-4"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token attr-name"}),":class"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token attr-value"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),"="),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),'"'),"{{ error ? 'text-red-600' : 'text-green-600' }}",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),'"')),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),">")),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),"</"),"div"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),">")))),Object(p.a)("p",null,"As long as a class name appears in your template ",Object(p.a)("em",{parentName:"p"},"in its entirety"),", PurgeCSS will not remove it."),Object(p.a)(i.a,{level:2,id:"removing-unused-css",toc:!0},"Removing unused CSS"),Object(p.a)(i.a,{level:3,id:"basic-usage",toc:!0},"Basic usage"),Object(p.a)("p",null,"To get started, provide an array of paths to all of your template files using the ",Object(p.a)("inlineCode",{parentName:"p"},"purge")," option:"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// tailwind.config.js"),"\nmodule",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"exports")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  purge",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.html'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.vue'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.jsx'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  theme",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  variants",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  plugins",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"))),Object(p.a)("p",null,Object(p.a)("strong",{parentName:"p"},"This list should include ",Object(p.a)("em",{parentName:"strong"},"any")," files in your project that reference any of your styles by name.")," For example, if you have a JS file in your project that dynamically toggles some classes in your HTML, you should make sure to include that file in this list."),Object(p.a)("p",null,"Now whenever you compile your CSS with ",Object(p.a)("inlineCode",{parentName:"p"},"NODE_ENV")," set to ",Object(p.a)("inlineCode",{parentName:"p"},"production"),", Tailwind will automatically purge unused styles from your CSS."),Object(p.a)(i.a,{level:3,id:"enabling-manually",toc:!0},"Enabling manually"),Object(p.a)("p",null,"If you want to manually control whether unused styles should be removed (instead of depending implicitly on the environment variable), you can use an object syntax and provide the ",Object(p.a)("inlineCode",{parentName:"p"},"enabled")," option, specifying your templates using the ",Object(p.a)("inlineCode",{parentName:"p"},"content")," option:"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// tailwind.config.js"),"\nmodule",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"exports")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  purge",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    enabled",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token boolean"}),"true"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    content",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.html'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// ..."),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"))),Object(p.a)("p",null,"We recommend only removing unused styles in production, as removing them in development means you need to recompile any time you change your templates and compiling with PurgeCSS enabled is much slower."),Object(p.a)(i.a,{level:3,id:"preserving-html-elements",toc:!0},"Preserving HTML elements"),Object(p.a)("p",null,"By default, Tailwind will preserve all basic HTML element styles in your CSS, like styles for the ",Object(p.a)("inlineCode",{parentName:"p"},"html"),", ",Object(p.a)("inlineCode",{parentName:"p"},"body"),", ",Object(p.a)("inlineCode",{parentName:"p"},"p"),", ",Object(p.a)("inlineCode",{parentName:"p"},"h1"),", etc. tags. This is to minimize accidentally over-purging in cases where you are using markdown source files for example (where there is no actual ",Object(p.a)("inlineCode",{parentName:"p"},"h1")," tag present), or using a framework that hides the document shell (containing the ",Object(p.a)("inlineCode",{parentName:"p"},"html")," and ",Object(p.a)("inlineCode",{parentName:"p"},"body")," tags) somewhere in a vendor directory (like Next.js does)."),Object(p.a)("p",null,"If you want to disable this behavior, you can set ",Object(p.a)("inlineCode",{parentName:"p"},"preserveHtmlElements")," to false:"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// tailwind.config.js"),"\nmodule",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"exports")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  purge",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    preserveHtmlElements",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token boolean"}),"false"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    content",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.html'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// ..."),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"))),Object(p.a)("p",null,"We generally do not recommend this and believe that the risks outweigh the benefits, but we're not the cops, do whatever you want."),Object(p.a)(i.a,{level:3,id:"purging-specific-layers",toc:!0},"Purging specific layers"),Object(p.a)("p",null,"By default, Tailwind will purge styles in all of the ",Object(p.a)("inlineCode",{parentName:"p"},"base"),", ",Object(p.a)("inlineCode",{parentName:"p"},"components"),", and ",Object(p.a)("inlineCode",{parentName:"p"},"utilities")," layers. If you'd like to change this, use the ",Object(p.a)("inlineCode",{parentName:"p"},"layers")," option:"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// tailwind.config.js"),"\nmodule",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"exports")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  purge",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    layers",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'components'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'utilties'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    content",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.html'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// ..."),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"))),Object(p.a)("p",null,"Note that the ",Object(p.a)("inlineCode",{parentName:"p"},"mode")," must be set to ",Object(p.a)("inlineCode",{parentName:"p"},"layers")," for this option to be respected."),Object(p.a)(i.a,{level:3,id:"removing-all-unused-styles",toc:!0},"Removing all unused styles"),Object(p.a)("p",null,"By default, Tailwind will only remove unused classes that it generates itself. It will ",Object(p.a)("em",{parentName:"p"},"not")," remove unused styles from third-party CSS you pull in to your project, like a datepicker library you pull in for example."),Object(p.a)("p",null,"This is to avoid accidentally removing styles that you might need but are not directly referenced in your templates, like classes that are only referenced deep in your ",Object(p.a)("inlineCode",{parentName:"p"},"node_modules")," folder that are part of some other dependency."),Object(p.a)("p",null,"If you really want to remove ",Object(p.a)("em",{parentName:"p"},"all")," unused styles, use the ",Object(p.a)("inlineCode",{parentName:"p"},"mode: 'all'")," option and ",Object(p.a)("strong",{parentName:"p"},"be very careful")," to provide the paths to ",Object(p.a)("em",{parentName:"p"},"all")," files that might reference any classes or HTML elements:"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// tailwind.config.js"),"\nmodule",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"exports")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  purge",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    mode",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'all'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    content",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),"\n      ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.js'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n      ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./node_modules/pikaday/pikaday.js'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// ..."),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"))),Object(p.a)("p",null,Object(p.a)("strong",{parentName:"p"},"We do not recommend this"),", and generally find you get 99% of the file size benefits by sticking with the more conservative default approach."),Object(p.a)(i.a,{level:3,id:"purge-css-options",toc:!0},"PurgeCSS options"),Object(p.a)("p",null,"If you need to pass any options directly to PurgeCSS, you can do so using ",Object(p.a)("inlineCode",{parentName:"p"},"options"),":"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// tailwind.config.js"),"\nmodule",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"exports")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  purge",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    content",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.html'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// These options are passed through directly to PurgeCSS"),"\n    options",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      whitelist",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'bg-red-500'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'px-4'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// ..."),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"))),Object(p.a)(i.a,{level:2,id:"setting-up-purge-css-manually",toc:!0},"Setting up PurgeCSS manually"),Object(p.a)("p",null,"Under the hood, Tailwind's ",Object(p.a)("inlineCode",{parentName:"p"},"purge")," feature is powered by a fantastic library called ",Object(p.a)("a",Object(n.a)({parentName:"p"},{href:"https://purgecss.com/"}),"PurgeCSS"),"."),Object(p.a)("p",null,"If you're using a version of Tailwind older than v1.4.0 and need to setup PurgeCSS manually, start by installing ",Object(p.a)("inlineCode",{parentName:"p"},"@fullhuman/postcss-purgecss"),":"),Object(p.a)("pre",{className:"language-bash"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"# Using npm"),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token function"}),"npm")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token function"}),"install")," @fullhuman/postcss-purgecss --save-dev\n\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"# Using yarn"),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token function"}),"yarn")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token function"}),"add")," @fullhuman/postcss-purgecss -D")),Object(p.a)("p",null,"Next, add it as the last plugin in your ",Object(p.a)("inlineCode",{parentName:"p"},"postcss.config.js")," file:"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// postcss.config.js"),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token keyword"}),"const")," purgecss ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token function"}),"require"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"("),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'@fullhuman/postcss-purgecss'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),")"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"("),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// Specify the paths to all of the template files in your project"),"\n  content",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.html'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.vue'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'./src/**/*.jsx'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// etc."),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// This is the function used to extract class names from your templates"),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token function-variable function"}),"defaultExtractor"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token parameter"}),"content")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token arrow operator"}),"=>")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// Capture as liberally as possible, including things like `h-(screen-1.5)`"),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token keyword"}),"const")," broadMatches ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," content",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token method function property-access"}),"match"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"("),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token regex"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token regex-delimiter"}),"/"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token language-regex"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-negation"}),"^"),"<>\"'`",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charclass"}),"\\s"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"]")),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token quantifier"}),"*"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-negation"}),"^"),"<>\"'`",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charclass"}),"\\s"),":",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"]"))),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token regex-delimiter"}),"/"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token regex-flags"}),"g")),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"||")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),"\n\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),'// Capture classes within other delimiters like .block(class="w-1/2") in Pug'),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token keyword"}),"const")," innerMatches ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," content",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token method function property-access"}),"match"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"("),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token regex"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token regex-delimiter"}),"/"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token language-regex"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-negation"}),"^"),"<>\"'`",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charclass"}),"\\s"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charclass"}),"."),"()",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"]")),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token quantifier"}),"*"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-negation"}),"^"),"<>\"'`",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charclass"}),"\\s"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charclass"}),"."),"():",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token charset-punctuation"}),"]"))),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token regex-delimiter"}),"/"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token regex-flags"}),"g")),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"||")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),"\n\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token keyword"}),"return")," broadMatches",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token method function property-access"}),"concat"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"("),"innerMatches",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),")"),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),")"),"\n\nmodule",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"exports")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  plugins",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token function"}),"require"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"("),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'tailwindcss'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),")"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token function"}),"require"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"("),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'autoprefixer'"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),")"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token spread operator"}),"..."),"process",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"env"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token constant"}),"NODE_ENV")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"===")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token string"}),"'production'"),"\n      ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"?")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),"purgecss",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),"\n      ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"))),Object(p.a)("p",null,"Note that in this example, ",Object(p.a)("strong",{parentName:"p"},"we're only enabling PurgeCSS in production"),". We recommend configuring PurgeCSS this way because it can be slow to run, and during development it's nice to have every class available so you don't need to wait for a rebuild every time you change some HTML."),Object(p.a)("p",null,"Finally, we recommend only applying PurgeCSS to Tailwind's utility classes, and not to ",Object(p.a)(r.a,{href:"/docs/adding-base-styles",passHref:!0},Object(p.a)("a",null,"base styles"))," or ",Object(p.a)(r.a,{href:"/docs/extracting-components#extracting-css-components-with-apply",passHref:!0},Object(p.a)("a",null,"component classes")),". The easiest way to do this is to use PurgeCSS's ",Object(p.a)("a",Object(n.a)({parentName:"p"},{href:"https://purgecss.com/whitelisting.html"}),"whitelisting")," feature to disable PurgeCSS for non-utility classes:"),Object(p.a)("pre",{className:"language-css"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-css"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"/* purgecss start ignore */"),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token atrule"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token rule"}),"@tailwind")," base",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),";")),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token atrule"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token rule"}),"@tailwind")," components",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),";")),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"/* purgecss end ignore */"),"\n\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token atrule"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token rule"}),"@tailwind")," utilities",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),";")))),Object(p.a)("p",null,"This will ensure you don't accidentally purge important base styles when working with frameworks like Next.js, Nuxt, vue-cli, create-react-app, and others that hide their base HTML template somewhere in your ",Object(p.a)("inlineCode",{parentName:"p"},"node_modules")," directory."),Object(p.a)(i.a,{level:3,id:"understanding-the-regex",toc:!0},"Understanding the regex"),Object(p.a)("p",null,"The ",Object(p.a)("inlineCode",{parentName:"p"},"/[\\w-/:]+(?<!:)/g")," regular expression we recommend as a starting point matches all of the non-standard characters Tailwind uses by default, like ",Object(p.a)("inlineCode",{parentName:"p"},":")," and ",Object(p.a)("inlineCode",{parentName:"p"},"/"),"."),Object(p.a)("p",null,"It also uses a negative lookbehind to make sure that if a string ends in ",Object(p.a)("inlineCode",{parentName:"p"},":"),", the ",Object(p.a)("inlineCode",{parentName:"p"},":")," is not considered part of the string. This is to ensure compatibility with the class object syntax supported by Vue and the ",Object(p.a)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/JedWatson/classnames"}),"Classnames")," library for React:"),Object(p.a)("pre",{className:"language-html"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"\x3c!-- Match `hidden`, not `hidden:` --\x3e"),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),"<"),"div")," ",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token attr-name"}),":class"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token attr-value"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),"="),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),'"'),"{ hidden: !isOpen, ... }",Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),'"')),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),">")),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"\x3c!-- ... --\x3e"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token tag"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),"</"),"div"),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token punctuation"}),">")))),Object(p.a)("p",null,"It's important to note that because of the negative lookbehind in this regex, it's only compatible with Node.js 9.11.2 and above. If you need to use an older version of Node.js to build your assets, you can use this regular expression instead:"),Object(p.a)("pre",{className:"language-diff"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-diff"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token deleted-sign deleted"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token prefix deleted"}),"-")," /[\\w-/:]+(?<!:)/g\n"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token inserted-sign inserted"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token prefix inserted"}),"+")," /[\\w-/:]*[\\w-/]/g"))),Object(p.a)(i.a,{level:3,id:"customizing-the-regex",toc:!0},"Customizing the regex"),Object(p.a)("p",null,"If you're using any other special characters in your class names, make sure to update the regular expression to include those as well."),Object(p.a)("p",null,"For example, if you have customized Tailwind to create classes like ",Object(p.a)("inlineCode",{parentName:"p"},"w-50%"),", you'll want to add ",Object(p.a)("inlineCode",{parentName:"p"},"%")," to the regular expression:"),Object(p.a)("pre",{className:"language-diff"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-diff"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token deleted-sign deleted"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token prefix deleted"}),"-")," /[\\w-/:]+(?<!:)/g\n"),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token inserted-sign inserted"}),Object(p.a)("span",Object(n.a)({parentName:"span"},{className:"token prefix inserted"}),"+")," /[\\w-/:%]+(?<!:)/g"))),Object(p.a)("hr",null),Object(p.a)(i.a,{level:2,id:"alternate-approaches",toc:!0},"Alternate approaches"),Object(p.a)("p",null,"If you can't use PurgeCSS for one reason or another, you can also reduce Tailwind's footprint by removing unused values from ",Object(p.a)(r.a,{href:"/docs/configuration",passHref:!0},Object(p.a)("a",null,"your configuration file")),"."),Object(p.a)("p",null,"The default theme provides a very generous set of colors, breakpoints, sizes, margins, etc. to make sure that when you pull Tailwind down to prototype something, create a CodePen demo, or just try out the workflow, the experience is as enjoyable and fluid as possible."),Object(p.a)("p",null,"We don't want you to have to go and write new CSS because we didn't provide enough padding helpers out of the box, or because you wanted to use an orange color scheme for your demo and we only gave you blue."),Object(p.a)("p",null,"This comes with a trade-off though: the default build is significantly heavier than it would be on a project with a purpose-built configuration file."),Object(p.a)("p",null,"Here are a few strategies you can use to keep your generated CSS small and performant."),Object(p.a)(i.a,{level:3,id:"limiting-your-color-palette",toc:!0},"Limiting your color palette"),Object(p.a)("p",null,"The default theme includes a whopping ",Object(p.a)(r.a,{href:"/docs/customizing-colors",passHref:!0},Object(p.a)("a",null,"93 colors"))," used for backgrounds, borders, text, and placeholders, all of which also have ",Object(p.a)("inlineCode",{parentName:"p"},"hover:")," and ",Object(p.a)("inlineCode",{parentName:"p"},"focus")," variants, as well as responsive variants at the five default screen sizes."),Object(p.a)("p",null,"By default, there are ",Object(p.a)("em",{parentName:"p"},"thousands")," of classes generated to accommodate these colors, and it makes up close to half of the final build size."),Object(p.a)("p",null,"Very few projects actually need this many colors, and removing colors you don't need can have a huge impact on the overall file size."),Object(p.a)("p",null,"Here's how using a smaller color palette affects the final size:"),Object(p.a)("table",null,Object(p.a)("thead",null,Object(p.a)("tr",null,Object(p.a)("th",null,"Colors"),Object(p.a)("th",null,"Original"),Object(p.a)("th",null,"Minified"),Object(p.a)("th",null,"Gzip"),Object(p.a)("th",null,"Brotli"))),Object(p.a)("tbody",null,Object(p.a)("tr",null,Object(p.a)("td",null,"93 ",Object(p.a)("em",null,"(default)")),Object(p.a)("td",null,O.a.default.original),Object(p.a)("td",null,O.a.default.minified),Object(p.a)("td",null,O.a.default.gzipped),Object(p.a)("td",null,O.a.default.brotlified)),Object(p.a)("tr",null,Object(p.a)("td",null,"50"),Object(p.a)("td",null,O.a["50-colors"].original),Object(p.a)("td",null,O.a["50-colors"].minified),Object(p.a)("td",null,O.a["50-colors"].gzipped),Object(p.a)("td",null,O.a["50-colors"].brotlified)),Object(p.a)("tr",null,Object(p.a)("td",null,"25"),Object(p.a)("td",null,O.a["25-colors"].original),Object(p.a)("td",null,O.a["25-colors"].minified),Object(p.a)("td",null,O.a["25-colors"].gzipped),Object(p.a)("td",null,O.a["25-colors"].brotlified)))),Object(p.a)(i.a,{level:3,id:"removing-unused-breakpoints",toc:!0},"Removing unused breakpoints"),Object(p.a)("p",null,"Since almost every Tailwind utility is copied for every screen size, using fewer screen sizes can have a huge impact on the overall file size as well."),Object(p.a)("p",null,"Here's how defining fewer screens affects the output:"),Object(p.a)("table",null,Object(p.a)("thead",null,Object(p.a)("tr",null,Object(p.a)("th",null,"Breakpoints"),Object(p.a)("th",null,"Original"),Object(p.a)("th",null,"Minified"),Object(p.a)("th",null,"Gzip"),Object(p.a)("th",null,"Brotli"))),Object(p.a)("tbody",null,Object(p.a)("tr",null,Object(p.a)("td",null,"4 ",Object(p.a)("em",null,"(default)")),Object(p.a)("td",null,O.a.default.original),Object(p.a)("td",null,O.a.default.minified),Object(p.a)("td",null,O.a.default.gzipped),Object(p.a)("td",null,O.a.default.brotlified)),Object(p.a)("tr",null,Object(p.a)("td",null,"3"),Object(p.a)("td",null,O.a["3-screens"].original),Object(p.a)("td",null,O.a["3-screens"].minified),Object(p.a)("td",null,O.a["3-screens"].gzipped),Object(p.a)("td",null,O.a["3-screens"].brotlified)),Object(p.a)("tr",null,Object(p.a)("td",null,"2"),Object(p.a)("td",null,O.a["2-screens"].original),Object(p.a)("td",null,O.a["2-screens"].minified),Object(p.a)("td",null,O.a["2-screens"].gzipped),Object(p.a)("td",null,O.a["2-screens"].brotlified)),Object(p.a)("tr",null,Object(p.a)("td",null,"1"),Object(p.a)("td",null,O.a["1-screen"].original),Object(p.a)("td",null,O.a["1-screen"].minified),Object(p.a)("td",null,O.a["1-screen"].gzipped),Object(p.a)("td",null,O.a["1-screen"].brotlified)))),Object(p.a)("p",null,"If you only need 3 screen sizes and 35 colors, you're down to ",O.a["35-colors-3-screens"].gzipped," after gzip ",Object(p.a)("em",null,"(",O.a["35-colors-3-screens"].brotlified," after Brotli!)")," without changing anything else."),Object(p.a)(i.a,{level:3,id:"disabling-unused-utilities-and-variants",toc:!0},"Disabling unused utilities and variants"),Object(p.a)("p",null,"If you don't expect to need a certain utility plugin in your project at all, you can disable it completely by setting it to ",Object(p.a)("inlineCode",{parentName:"p"},"false")," in the ",Object(p.a)("inlineCode",{parentName:"p"},"corePlugins")," section of your config file:"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// tailwind.config.js"),"\nmodule",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"exports")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// ..."),"\n  corePlugins",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    float",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token boolean"}),"false"),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"))),Object(p.a)("p",null,"If you need a utility but don't need the responsive versions, set its variants to an empty array to generate 80% fewer classes:"),Object(p.a)("pre",{className:"language-js"},Object(p.a)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"module",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"."),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token property-access"}),"exports")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// ..."),"\n  variants",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    appearance",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token operator"}),":")," ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),"\n  ",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(p.a)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"))),Object(p.a)("p",null,"These are mostly small wins compared to limiting your color palette or using fewer breakpoints, but they can still add up."))}f.isMDXComponent=!0,f.layoutProps=k},xCSP:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/controlling-file-size",function(){return t("nRdq")}])}},[["xCSP",0,2,1,3,4]]]);